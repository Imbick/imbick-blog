
[{"content":"Always needed a console in this thing.\nConsole overlay running in Rise\rI\u0026rsquo;ve never been a fan of anything which hides away the internals. Especially software.\nSo I\u0026rsquo;ve always had a console implemented into Rise from the very beginning. It\u0026rsquo;s been working well but I recently decided to give it some more attention and some polish. It\u0026rsquo;s using ImGui for the UI elements but I plan on possibly replacing this with my own UI library when viable.\nAs you can see from the screenshot, the console supports commands and variables. So you\u0026rsquo;ll be able to do things like;\n/set name Thresh I plan on making the whole system very flexible with autofill and help prompts etc. but for now it\u0026rsquo;s pretty basic.\n","date":"21 August 2025","externalUrl":null,"permalink":"/posts/console/","section":"Posts","summary":"","title":"Consoles for hacks","type":"posts"},{"content":"","date":"21 August 2025","externalUrl":null,"permalink":"/","section":"Imbick's Edge","summary":"","title":"Imbick's Edge","type":"page"},{"content":"","date":"21 August 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"It\u0026rsquo;s been a while without any updates here, but here\u0026rsquo;s the latest version packaged up.\n\u0026nbsp;Download v0.1.1-alpha I\u0026rsquo;ve been massively overhauling the way input contexts work along with the physics calculations. I took a detour into experimenting with EnttSharp, but it ended using over 25% CPU whenever components were written back which seemed excessive so I rolled back to LeoEcsLite but kept some of the API refactoring which was an improvement.\nNext I\u0026rsquo;ll be continuing to tweak the physics numbers to get a good feeling. Along with fixing the jump code and wall slide accelerations which shouldn\u0026rsquo;t be happening.\n","date":"12 August 2025","externalUrl":null,"permalink":"/posts/v0.1.1-alpha/","section":"Posts","summary":"","title":"Release v0.1.1-alpha","type":"posts"},{"content":"As part of the block picking work I had to move the Input Context which handles in game actions from the main framework into the extension. So I figured it\u0026rsquo;s probably worth a quick explanation of how extensions currently work.\nThis is almost certainly going to radically change\u0026hellip;\rThe rise framework will scan the local extensions folder and then search for dll files within subfolders. Each subfolder will be treated as it\u0026rsquo;s own extension. The dll file will then be searched for any public class which inherits from Extension. All libraries with the extension folder will then be searched for event handlers. The list of event handlers is currently things like:\nTickEvent Local/NetworkClientConnectedEvent etc. The next step is to invoke AddServices on the extension instance. This will give the extension a chance to register or override any services in the DI container. (Due to security there will probably only be a handful of well defined extension points that are allowed to be overridden, but for now it\u0026rsquo;s everything.)\nOnce the extension class and event handlers are loaded the OnEnabled method of the extension instance is invoked. Allowing the extension to perform any initialisation it needs. The OnEnabled method will receive an instance of the extension IHost which will provide access to framework services.\nWhat all this means is that the entire voxel game is an extension. And I will provide additional extensions which showcase what can be achieved and possibly even make them open source.\nI\u0026rsquo;ll demonstrate all this in more depth soon.\n","date":"5 August 2025","externalUrl":null,"permalink":"/posts/extendo/","section":"Posts","summary":"","title":"Extensions","type":"posts"},{"content":"Who knew realism was so hard to program?\nMeanwhile I took a few days to visit friends. Now working on world interaction. So started with block picking which needs a way to query live block info. That means I\u0026rsquo;m looking into block and chunk storage techniques. Will probably end up with a sort of live (narrow) grid of chunks which exists around the player and is updated as you traverse chunk boundaries. Not sure how to handle the actual loading and generating of chunks when this happens. I may need to separate the two quite strictly.\nThis is helping immensely üßö\n","date":"3 August 2025","externalUrl":null,"permalink":"/posts/gravity/","section":"Posts","summary":"","title":"Gravity","type":"posts"},{"content":"Far less progress made this evening.\nA major refactor on the way input contexts work. So now all of the physics code for deciding what happens when a player jumps or collides etc is controlled by the input context which is a more sensible place for it to live.\nIn doing so I started to notice how poor the physics code was implemented, so I restructured a lot of that. Which enabled me to model the jump physics more accurately - so no more jetpacks :'(\nTomorrow I hope to work more on the jump handling and general movement of the player so things feel more natural.\nThen I\u0026rsquo;ll probably turn my attention to interaction with the world, which should make this thing start to become more like a real boy game.\n","date":"30 July 2025","externalUrl":null,"permalink":"/posts/jumping/","section":"Posts","summary":"","title":"Jumps","type":"posts"},{"content":"Mainly fixing bugs this morning and getting things into a better state.\nThere was a bug where the player would appear to accelerate towards the left or right when \u0026lsquo;jumping\u0026rsquo;. (Jumping currently behaves like some kind of crazy jetpack üë®‚ÄçüöÄ - it very much shouldn\u0026rsquo;t)\nThis was due to me clamping each axis separately to within the max speed limits.\nx = float.Clamp(x, -MaxHorizontalSpeed, MaxHorizontalSpeed); z = float.Clamp(z, -MaxHorizontalSpeed, MaxHorizontalSpeed); This had the effect of keeping one axis below the speed limit, but allowing the other to continue to accelerate. Now I validate against the length of the vector rather than the individual axes.\nAs you can see from the screenshot I\u0026rsquo;m also now playing around with some different block arrangements to try and find any weird edge cases with the collision detection.\nI think I need to add a small offset when resolving intersections to avoid collisions with block seams but need to find a reproducible test case first.\n","date":"30 July 2025","externalUrl":null,"permalink":"/posts/playing/","section":"Posts","summary":"","title":"Playing and fixing","type":"posts"},{"content":"Not quite a game, but a here\u0026rsquo;s a game-like-thing I made nonetheless.\n\u0026nbsp;Download v0.1.0-alpha C#, .NET 8, fully custom engine.\nVery small number of only essential libraries used.\n","date":"28 July 2025","externalUrl":null,"permalink":"/posts/rise/","section":"Posts","summary":"","title":"We make games","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]